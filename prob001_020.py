#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Solutions to problems on Project Euler (www.projecteuler.net) Problems 1-20
"""
# Written by: Cody Piersall
# Euler's Project
from math import sqrt, factorial

def prob1(maxnum):
    '''
    If we list all the natural numbers below 10 that are multiples 
    of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    
    Find the sum of all the multiples of 3 or 5 below 1000.
    '''
    good_number = [] # a good_number is a number that is divisible by 3 or 5.
    test_number = 1
    while test_number < maxnum:
        if test_number % 3 == 0 or test_number % 5 == 0:
            good_number.append(test_number)
        test_number += 1
    
    good_number_sum = sum(good_number)
    print("The sum of all numbers less than %s divisible by 3 or 5 is %s" % (maxnum, good_number_sum))


def prob2(maxnum):
    '''
    Each new term in the Fibonacci sequence is generated by adding the previous 
    two terms. By starting with 1 and 2, the first 10 terms will be:
    
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    By considering the terms in the Fibonacci sequence whose values do 
    not exceed four million, find the sum of the even-valued terms.
    '''
    fibonacci_numbers = fibonacci(maxnum)
    divisible_fib_numbers = clean_fib_numbers(fibonacci_numbers, 2)
    answer = sum(divisible_fib_numbers)
    print('The sum of all Fib #s less than %s divisible by 2 is %s' %(maxnum, answer))
    

def clean_fib_numbers(fibonacci_numbers, divisor=2):
    '''
    returns a list from a list of numbers divisible by divisor.
    '''
    divisible_fib_nums = []
    for number in fibonacci_numbers:
        if number % divisor == 0:
            divisible_fib_nums.append(number)
    
    return divisible_fib_nums

def fibonacci(maxnum):
    """
    Calculates the numbers in the fibonacci sequence <= maxnum
    """
    fib_nums = [1,2]
    fib_nums_max = fib_nums[-1]
    
    while fib_nums_max <= maxnum:
        next_num = fib_nums[-1] + fib_nums[-2]
        fib_nums.append(next_num)
        fib_nums_max = fib_nums[-1]
        
    # The above while loop added one number too many; time to take it off.
    fib_nums.pop()
    return fib_nums


def prob3(number):
    '''
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143
    '''
    prime_factors = get_prime_factors(number)
    largest_prime_factor = max(prime_factors)
    print('The largest prime factor of %s is %s' % (number, largest_prime_factor))


def get_prime_factors(number):
    '''
    returns a list of prime factors
    '''
    divisors = []
    divided_number = number
    while divided_number != 1:
        divisor = 2
        
        while divisor <= divided_number:
            
            if divided_number % divisor == 0:
                divisors.append(divisor)
                divided_number = divided_number / divisor
            
            else:
                divisor += 1
    print('The divisoros of %s is %s' %(number, divisors))
    return divisors


def prob4():
    """
    A palindromic number reads the same both ways. The largest palindrome made 
    from the product of two 2-digit numbers is 9009 = 91 * 99.
    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    '''
    starts with 100*100, loops through all permutations up to 999 * 999.
    creates a list of palindromes, and prints the largest.
    '''
    palindromes = []
    for number1 in range(100, 999):
        for number2 in range(100, 999):
            product = number1 * number2
            is_palindrome = check_if_palindrome(product)
            if is_palindrome:
                palindromes.append(product)
    largest_palindrome = max(palindromes)
    print('The largest prime number that is the product of two 3-digit numbers is %s' % largest_palindrome)
            

def check_if_palindrome(number):
    number = str(number)
    backwards_number = number[::-1]
    if number == backwards_number:
        is_palindrome = True
    else:
        is_palindrome = False
    return is_palindrome  
        

def prob5(maxnum):
    '''
    2520 is the smallest number that can be divided by each 
    of the numbers from 1 to 10 without any remainder.
    
    What is the smallest positive number that is evenly divisible 
    by all of the numbers from 1 to 20?
    '''
    
    prime_factors = []
    temp_factors = []
    
    for number in range(1,maxnum):
        factors = get_prime_factors(number)
        
        for factor in factors:
            if factor in prime_factors:
                
                # the factor needs to be removed from prime_factors so that, if there are multiple factors of
                # the same number (e.g., 3 and 3 are the prime factors of 9), the extra factors will
                # be added to the prime factors.  The factors are stored temporarily in temp_factors.
                prime_factors.remove(factor) 
                temp_factors.append(factor)
            else:
                prime_factors.append(factor)
        prime_factors.extend(temp_factors)
        temp_factors = []
    
    product = 1
    for prime_number in prime_factors:
        product *= prime_number
    
    print('The smallest number that is divisible by each number in the range 1-%s is %s' % (maxnum, product))


def prob6(number):
    '''
    The sum of the squares of the first ten natural numbers is
    1**2 + 2**2 + ... + 10**2 = 385
    
    The square of the sum of the first ten natural numbers is    
    (1 + 2 + ... + 10)**2 = 55**2 = 3025
    
    Hence the difference between the sum of the squares of the first ten 
    natural numbers and the square of the sum is 3025  385 = 2640.
    Find the difference between the sum of the squares of the first 
    one hundred natural numbers and the square of the sum.
    '''
    sum_of_squares = sum_squares(number)
    square_of_sum = square_sum(number)
    difference = square_of_sum - sum_of_squares
    print ('The difference between the square of the sum and sum of the squares of each number in the range 1-%s is %s' % (number, difference))

def sum_squares(number):
    sum_of_squares = 0
    for num in range(1, number + 1):
        sum_of_squares += num ** 2
    return sum_of_squares
        
def square_sum(number):
    square_of_sum = sum(range(1, number + 1)) ** 2
    return square_of_sum


def prob7(nth_prime_to_find):
    """Calculate the 10001st prime"""
    primes_found = calc_nth_prime(nth_prime_to_find)
    nth_prime = primes_found[-1]
    print('Prime # %s is %s' % (nth_prime_to_find,nth_prime))
        

def calc_nth_prime(nth_prime):
    """
    Method calculates the nth prime number.  It stores each found prime number into
    a list, and only divides the current number being tested by the previously found
    prime numbers.
    """
    #  Because the algorithm used doesn't work for the number 2, it needs to be initialized.
    primes_found = [2]
    num_primes_found = 1
    
    current_number = 3
    while num_primes_found < nth_prime:
        number_is_prime = True
        
        for prime_number in primes_found:
            # This loop divides current_number by every prime number found so far that is less than the checking_limit.
            # checking_limit is the sqrt of checkingNumber, because it is an efficient way to do it.
        
            checking_limit = sqrt(current_number) # No need to check numbers higher than the square root.
            if prime_number <= checking_limit:
                if current_number % prime_number == 0:
                    number_is_prime = False
                    break
            else:
                break
            
        if number_is_prime:
            primes_found.append(current_number)
            num_primes_found += 1
            
        current_number += 1    
        
    return primes_found


def prob8():
    '''
    Find the greatest product of five consecutive digits in the 1000-digit number.
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    '''
    number_string = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
    products = analyze_string(number_string)
    max_product = max(products)
    print('the greatest product of five consecutive digits in the 1000-digit number is %s' % max_product)
    

def analyze_string(string, consecutive_digits=5):
    """Multiplies every group of 5 consecutive numbers together, stores results in a list."""
    string_length = len(string)
    iterations_needed = string_length - consecutive_digits
    
    products = []
    
    for digit in range(1, iterations_needed):
        current_digits = string[digit:digit + 5]
    
        if '0' in current_digits:
            pass
        else:
            product = multiply_digits(current_digits)
            products.append(product)
    return products

def multiply_digits(string_of_digits):
    product = 1
    for digit in string_of_digits:
        digit = int(digit)
        product *= digit
    return product


def prob9(number):
    """
    A Pythagorean triplet is a set of three natural numbers, a  b  c, for which,

    a**2 + b**2 = c**2
    For example, 32 + 42 = 9 + 16 = 25 = 5**2.
    
    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    """

    
    max_value = int(number / 2) # add 1 because int() floors the float, add another because range needs 1 more than I would think.
    
    for a in range(1,max_value):
        for b in range(1, max_value):
            for c in range(1, max_value):
                if c <= a or c <= b:
                    pass
                else:
                    if a ** 2 + b ** 2 == c ** 2:
                        if a + b + c == number:
                            print('The product of the Pythagorean triplet which adds to %s is %d' % (number, a*b*c))
                            break
                

def prob10(nmax):
    """
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    Find the sum of all the primes below two million.
    """

    prime_nums = calc_primes_less_than_n(nmax)
    print('The sum of the primes less than %s is %s' % (nmax, sum(prime_nums)))
    

def calc_primes_less_than_n(nmax):
    """
    Method calculates the nth prime number.  It stores each found prime number into
    a list, and only divides the current number being tested by the previously found
    prime numbers.
    """
    #  Because the algorithm used doesn't work for the number 2, it needs to be initialized.
    primes_found = [2]
    
    current_number = 3
    while current_number < nmax:
        number_is_prime = True
        
        for prime_number in primes_found:
            # This loop divides current_number by every prime number found so far that is less than the checking_limit.
            # checking_limit is the sqrt of checkingNumber, because it is an efficient way to do it.
        
            checking_limit = sqrt(current_number) # No need to check numbers higher than the square root.
            if prime_number <= checking_limit:
                if current_number % prime_number == 0:
                    number_is_prime = False
                    break
            else:
                break
            
        if number_is_prime:
            primes_found.append(current_number)
            
        current_number += 1    
        
    return primes_found
 
 
def prob11():
    '''
    In the 20x20 grid below, four numbers along a diagonal line have been marked in red.

    What is the greatest product of four adjacent numbers in any direction 
    (up, down, left, right, or diagonally) in the 20x20 grid?
    '''
    string_of_numbers = '''
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'''
    
    number_grid = string_of_numbers.split('\n')
    number_grid.remove('') # from the first '\n'
    
    
    for row in range(0, len(number_grid)):
        number_grid[row] = number_grid[row].split(' ')
        for number in number_grid[row]:
            number = int(number)
    
    number_grid = [[int(column) for column in row] for row in number_grid]
    
    products = get_products(number_grid)

    print('The largest product of 4 numbers in the 20x20 grid is %s' % max(products))


def get_products(number_grid):
    products = []
    num_rows = len(number_grid) # this only happens to be true because it is a square grid
    for row in range(0, num_rows):
        for col in range(0, row):
            horizontal_products(number_grid, row, col, products)
            vertical_product(number_grid, row, col, products)
            SW_product(number_grid, row, col, products)
            NE_product(number_grid, row, col, products)

    return products

def horizontal_products(number_grid, row, col, products):
    if col <= 16:
        product = 1
        for index in range(0, 4):
            colindex = col + index
            product *= number_grid[row][colindex]
            
        products.append(product)
    
def vertical_product(number_grid, row, col, products):
    if row <= 16:

        product = 1            
        for index in range(0, 4):
            rowindex = row + index
            product *= number_grid[rowindex][col]
        
        products.append(product)
    
def SW_product(number_grid, row, col, products):
    if row <= 16 and col >= 3:
        product = 1            
        for index in range(0, 4):
            rowindex = row + index
            colindex = col - index
            product *= number_grid[rowindex][colindex]
        
        products.append(product)
    
def NE_product(number_grid, row, col, products):
    if row >= 3 and col <= 16:
        product = 1            
        for index in range(0, 4):
            rowindex = row - index
            colindex = col + index
            product *= number_grid[rowindex][colindex]
        
        products.append(product)
        
    
def prob12(num_divisors_needed):  
    """
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    
    Let us list the factors of the first seven triangle numbers:
    
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    
    What is the value of the first triangle number to have over five hundred divisors?
    """
    
    # Set up for while loop
    number_found = False
    triangular_num_increment = 1 # would be 1 if incremented at top of while loop
    triangular_number = 1
    
    while(not number_found):
       
        prime_factors = get_prime_factors(triangular_number)
        num_divisors, factors = get_num_divisors(triangular_number, prime_factors)
        
        if num_divisors > num_divisors_needed:
            number_found = True
            print('The first triangular number with over %s divisors is %s' % (num_divisors_needed, triangular_number))
        
        else:
            triangular_num_increment += 1
            triangular_number += triangular_num_increment


def get_num_divisors(triangular_number, prime_factors):
    """finds all divisors by storing factors temp list, and multiplying by prime numbers."""
    unique_primes = [] 
    
    # this loop gets only unique values in unique_primes
    for prime in prime_factors:
        if prime not in unique_primes:
            unique_primes.append(prime)
            
    factors = list(unique_primes)
    
    for prime in unique_primes:
        
        for factor in factors:
            
            candidate = prime * factor
            if candidate not in factors and triangular_number % candidate == 0:
                factors.append(candidate)
                
    factors.insert(0,1)
    num_divisors = len(factors)        
    return num_divisors, factors


def prob13():
    """
    Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
    """
    number_as_text = """37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690"""

    list_of_numbers = number_as_text.split("\n")
    list_of_numbers = [int(num) for num in list_of_numbers]
    sum_of_nums = sum(list_of_numbers)
    sum_of_nums10 = str(sum_of_nums)[0:10]
    print('The first 10 digits of the sum of those bunches of numbers is %s' % sum_of_nums10)


def prob14(maxnum):
    """
    The following iterative sequence is defined for the set of positive integers:

    n -> n/2 (n is even)
    n -> 3n + 1 (n is odd)
    
    Using the rule above and starting with 13, we generate the following sequence:
    
    13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
    It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. 
    Although it has not been proved yet (Collatz Problem), it is thought that 
    all starting numbers finish at 1.

    Which starting number, under one million, produces the longest chain?    
    NOTE: Once the chain starts the terms are allowed to go above one million.
    """
    """
    My idea for solving it is this:  start at one million, do the series, and store
    tuples for how many iterations are left.  
    For the example above, the algorithm would give this:
    (13, 9), (40, 8) (20, 7), (10, 6), ..., (2, 1), (1, 0)
    """
    longest_sequence = []
    minnum = int(maxnum / 2) # any number less than half of the max number will be reached with one more entry by dividing by two.
    
    for number in range(minnum,maxnum):
        if number not in longest_sequence:
            temp_sequence = get_collatz_sequence(number)
            if len(temp_sequence) > len(longest_sequence):
                longest_sequence = list(temp_sequence)
    starting_number = longest_sequence[0]
    
    print('Of numbers < %s, The starting number with the longest chain is %s. It has %s terms.' % (maxnum, starting_number, len(longest_sequence)))
    

def prob15(num_rows, num_columns):
    """
    Starting in the top left corner of a 2x2 grid, there are 6 routes (without backtracking) to the bottom right corner.
    How many routes are there through a 20x20 grid?
    """
    '''
    One way to represent moving along the grid is by writing moves to the right as R and
    moves down as D. Because there can be no backtracking, there must be exactly 20 moves 
    to the right and 20 moves down. These moves can be in any order; so the problem is 
    equivalent to how many unique ways to organize 20 Rs and 20 Ds.  One solution is
    RRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDD; another is
    RRRRRRRRRRRRRRRRRRRDRDDDDDDDDDDDDDDDDDDD; another is
    RRRRRRRRRRRRRRRRRRRDDRDDDDDDDDDDDDDDDDDD and so on.
    
    Conceptually, this is how I understand solving this: give each R and D a unique ID; 
    let them be the numbers 1-40.  There are 40! ways to order their IDs; one possible solution is
    RRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDD
    0123456789abcdefghijklmnopqrstuvwxyzABCD
    
    But there are many ways to order the IDs to achieve this unique combination of Rs and Ds.  Because
    There are 20 Rs (each with a unique ID), there are 20! ways to organize the Rs for this combination
    of Rs and Ds.  Similarly there are 20! ways to organize the Ds.  So, for this combination of Rs and
    Ds, there are 20! * 20! unique combinations of their IDs.
    
    To get the unique combinations of Rs and Ds, we can find the unique combinations of IDs and divide
    by the number of ways to order the IDs of the Rs and the IDs of the Ds.  This gives us
    
                      (R + D)!
    Combinations = -------------
                      R! * D!
                      
    which can be generalized for an m x n grid to 
    Combinations = (m + n)! / (m! * n!)
    '''  
    unique_combinations = factorial(num_rows + num_columns) / (factorial(num_rows) * factorial(num_columns))
    print('There are %s unique ways to get from one corner to its opposite on a %sx%s grid.' %(unique_combinations, num_rows, num_columns))


def get_collatz_sequence(number):
    sequence_terminated = False
    collatz_sequence = [number]
    while not sequence_terminated:
        number = next_collatz_term(number)
        if number == 1:
            sequence_terminated = True
        collatz_sequence.append(number)
        
    return collatz_sequence
        
def next_collatz_term(n):
    '''
    n -> n/2 (n is even)
    n -> 3n + 1 (n is odd)
    '''
    if  n % 2 == 0:
        n /= 2
    
    else:
        n = 3 * n + 1
 
    return n


def prob16(base, exp):
    """Sum of the digits of 2 ** 1000"""

    two_to_thousand = base ** exp
    two_to_thousand = str(two_to_thousand)
    sum_ = 0
    for digit in two_to_thousand:
        digit = int(digit)
        sum_ += digit
    print('The sum of the digits of %s ** %s = %s' % (base, exp, sum_))


def prob17(minnum, maxnum):
    """
    If the numbers 1 to 5 are written out in words: one, two, three, four, five, then 
    there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
    
    If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, 
    how many letters would be used?
    NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) 
    contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use 
    of "and" when writing out numbers is in compliance with British usage.
    """
    word_length_dict = get_word_length_dict()
    total_length = 0
    for n in range(minnum,maxnum + 1):
        total_length += get_num_word_length(n, word_length_dict)
    print('Writing out all numbers from %s to %s takes %s letters' % (minnum, maxnum, total_length))

def get_num_word_length(n, word_length_dict):
    n = str(n)
    if len(n) == 4:
        word_length = len('onethousand')
    
    elif len(n) == 3:
        word_length = get_3digit_num_word_length(n, word_length_dict)
    
    elif len(n) == 2:
        word_length = get_2digit_num_word_length(n, word_length_dict)
    
    else:
        word_length = word_length_dict[n]
    
    return word_length

def get_3digit_num_word_length(n, word_length_dict):
        first = n[0:1]
        last_two = n[1:3]
        word_length = word_length_dict[first] + word_length_dict['100']
        
        if last_two != '00':
            word_length = word_length + 3 + get_2digit_num_word_length(last_two, word_length_dict)
        
        return word_length

def get_2digit_num_word_length(n, word_length_dict):
    intn = int(n)
    if intn < 10:
        n = n[1:2]
        word_length = word_length_dict[n]
    
    elif intn < 20:
        word_length = word_length_dict[n]
    
    else:
        tens_place = n[0:1] + '0'
        ones_place = n[1:2]
        
        if ones_place == '0':
            word_length = word_length_dict[tens_place]
        else:
            word_length = word_length_dict[tens_place] + word_length_dict[ones_place]

    return word_length
    
def get_word_length_dict():
    word_length_dict = {1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six',
                        7:'seven', 8:'eight', 9:'nine', 10:'ten', 11:'eleven',
                        12:'twelve', 13:'thirteen', 14:'fourteen', 15:'fifteen',
                        16:'sixteen', 17:'seventeen', 18: 'eighteen', 19: 'nineteen',
                        20:'twenty', 30:'thirty', 40:'forty', 50:'fifty', 60:'sixty',
                        70:'seventy', 80:'eighty', 90:'ninety', 100:'hundred', 1000: 'thousand'}
    
    list_of_indices = []
    for index in word_length_dict: 
        # change from words to the lengths of the words, and store indices in list
        # store them in a list so that it can be iterated and the dict keys can be changed
        # changing the keys to strings here will increase efficiency
        
        word_length_dict[index] = len(word_length_dict[index])
        list_of_indices.append(index)
       
    for index in list_of_indices:    
        word_length_dict[str(index)] = word_length_dict.pop(index)
    
    return word_length_dict
    

def prob18():
    """
    By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
       3
      7 4
     2 4 6
    8 5 9 3
    That is, 3 + 7 + 4 + 9 = 23.
    Find the maximum total from top to bottom of the triangle below:
    """
    raw_triangle = '''
                  75
                 95 64
                17 47 82
               18 35 87 10
              20 04 82 47 65
             19 01 23 75 03 34
            88 02 77 73 07 63 67
           99 65 04 28 06 16 70 92
          41 41 26 56 83 40 80 70 33
         41 48 72 33 47 32 37 16 94 29
        53 71 44 65 25 43 91 52 97 51 14
       70 11 33 28 77 73 17 78 39 68 17 57
      91 71 52 38 17 14 91 43 58 50 27 29 48
     63 66 04 68 89 53 67 30 73 16 69 87 40 31
    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
    '''
    triangle = format_triangle(raw_triangle)
    greatest_sum = get_greatest_sum(triangle)
    print('The greatest sum out of any path is %s' % greatest_sum)
    
def get_greatest_sum(triangle):
    '''
    Gets the greatest possible sum out of all paths down a triangle
    Essentially, rather than going down each possible path, this
    function iterates along each row of the triangle a single time,
    and remembers the greatest possible sum at each row of the trianlge.
    '''
    current_row_sum = triangle[0]
    for rownum, row in enumerate(triangle):
        if rownum != 0: # the first row's greatest sum is just the value of the first number.
            last_row_sum = list(current_row_sum)
            current_row_sum = []
            
            for index, number in enumerate(row):
                if index == 0: # the path down the left side of the triangle
                    current_row_sum.append(last_row_sum[0] + number)
                
                elif index == len(row) - 1: # the path down the right side of the triangle
                    current_row_sum.append(last_row_sum[index - 1] + number)
                else:
                    first_value = last_row_sum[index - 1] + number
                    second_value = last_row_sum[index] + number
                    if first_value > second_value:
                        max_value = first_value
                    else:
                        max_value = second_value
                    current_row_sum.append(max_value)
                
    greatest_sum = max(current_row_sum)            
    return greatest_sum
    
def format_triangle(triangle):
    """Formats a triangle to be a list of lists with no empty values"""
    triangle_as_list = triangle.split('\n')
    triangle_as_list = [row for row in triangle_as_list if row != '']
    
    for rownum, row in enumerate(triangle_as_list): # separate numbers
        triangle_as_list[rownum] = row.split(' ')
    
    formatted_triangle = []
    
    for row in triangle_as_list: # get rid of non-numbers
        row = [int(value) for value in row if value != '']
        formatted_triangle.append(row)
    
    for row in formatted_triangle: # get rid of empty rows
        if row == []: 
            formatted_triangle.remove([])
    
    return formatted_triangle


def prob19(start_year, end_year, day_of_week='Sunday'):
    """
    You are given the following information, but you may prefer to do some research for yourself.

    1 Jan 1900 was a Monday.
    Thirty days has September,
    April, June and November.
    All the rest have thirty-one,
    Saving February alone,
    Which has twenty-eight, rain or shine.
    And on leap years, twenty-nine.

    A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
    How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
    """
    
    days_dict ={'Sunday': 0, 'Monday': 1, 'Tuesday': 2, 'Wednesday': 3, 'Thursday': 4, 'Friday': 5, 'Saturday': 6}
    day_ID = days_dict[day_of_week]
    
    first_day_ID = calibrate_days(start_year) # returns day ID for first day of year
    
    # list_of_days treats every year like a leap year because it doesn't matter how many days are in 
    # the list as long as the correct days are in first_of_month
        
    list_of_days = [day for day in range(day_ID, 366 * (end_year - start_year + 1), 7)]
    
    first_of_month = get_first_of_month_days(first_day_ID, start_year, end_year)
    
    num_first_days = 0
    for day in first_of_month:
        if day in list_of_days:
            num_first_days += 1
    
    print('%s months from %s to %s began with a %s' % (num_first_days, start_year, end_year, day_of_week))

def calibrate_days(start_year):
    '''
    Gets the day for January 1 of start_year, knowing that Jan 1 1900 was a Monday
    Returns 0 for Sunday, 1 for Monday, 2 for Tuesday... 6 on Monday
    '''
    
    days_difference = 0
    first_day_of_1900 = 1 # Monday
    
    if start_year > 1900:
        begin_year = 1900
        end_year = start_year
    
    else:
        begin_year = start_year
        end_year = 1900
        
    for year in range(begin_year, end_year):
    
        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
            days_difference += 366
        else:
            days_difference += 365
    
    if start_year <= 1900:
        days_difference = -days_difference
    
    start_day = (days_difference + 1) % 7
    print('the first day of %s was %s' %(start_year,start_day))
    return start_day
    
def get_first_of_month_days(first_day, start_year, end_year):
    '''Days since 1 Jan 1900: each one starts with '''
    first_of_month = [first_day]
    
    for year in range(start_year, end_year + 1):
            first_of_month.append(first_of_month[-1] + 31)      # January            
            if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
                first_of_month.append(first_of_month[-1] + 29)  # February leap year
            else:
                first_of_month.append(first_of_month[-1] + 28)  # February normal year
            first_of_month.append(first_of_month[-1] + 31)      # March
            first_of_month.append(first_of_month[-1] + 30)      # April
            first_of_month.append(first_of_month[-1] + 31)      # May
            first_of_month.append(first_of_month[-1] + 30)      # June
            first_of_month.append(first_of_month[-1] + 31)      # July
            first_of_month.append(first_of_month[-1] + 31)      # August
            first_of_month.append(first_of_month[-1] + 30)      # September
            first_of_month.append(first_of_month[-1] + 31)      # October
            first_of_month.append(first_of_month[-1] + 30)      # November
            first_of_month.append(first_of_month[-1] + 31)      # December
    
    return first_of_month
            

def prob20(number):
    """Find the sum of digits in 100!"""
    fact = factorial(number)
    sum_of_digits = sum([int(digit) for digit in str(fact)])
    print('The sum of the digits of %s! is %s' % (number, sum_of_digits))


if __name__ == "__main__":
#    prob1(1000)
#    prob2(4000000)
#    prob3(0) 
#    prob4()
#    prob5(20)
#    prob6(100) 
#    prob7(1001)
#    prob8()
#    prob9(1000)
#    prob10(20000)
#    prob11()
#    prob12(500)
#    prob13()
#    prob14(1000)
#    prob15(20, 20)
#    prob16(2, 100)
#    prob17(1, 1000)
#    prob18()
#    prob19(1901, 2000, 'Monday')
#    prob20(100)
    pass