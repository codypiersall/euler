""" All the problems are here. """

# built-in imports
import csv
import itertools
import functools
import shelve
from math import factorial

# first-party imports
import euler
from euler import SHELVED_FILE


def prob1(maxnum, numbers):
    """
    If we list all the natural numbers below 10 that are multiples 
    of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    
    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    divisible_nums = euler.divisible_by_any(maxnum, numbers=[3,5])
    good_number_sum = sum(divisible_nums)
    return good_number_sum
    
def prob2(maxnum):
    '''
    Each new term in the Fibonacci sequence is generated by adding the previous 
    two terms. By starting with 1 and 2, the first 10 terms will be:
    
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    
    By considering the terms in the Fibonacci sequence whose values do 
    not exceed four million, find the sum of the even-valued terms.
    '''
    fibonacci_numbers = euler.fibonacci(maxnum)
    divisible_fib_numbers = euler.filter_list_by_divisible(fibonacci_numbers, 2)
    answer = sum(divisible_fib_numbers)
    return answer

def prob3(number):
    '''
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143
    '''
    prime_factors = euler.get_prime_factors(number)
    largest_prime_factor = max(prime_factors)
    return largest_prime_factor
    

def prob4():
    """
    A palindromic number reads the same both ways. The largest palindrome made 
    from the product of two 2-digit numbers is 9009 = 91 * 99.
    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    '''
    starts with 100*100, loops through all permutations up to 999 * 999.
    creates a list of palindromes, and prints the largest.
    '''
    palindromes = []
    for number1 in range(100, 999):
        for number2 in range(100, 999):
            product = number1 * number2
            is_palindrome = euler.check_if_palindrome(product)
            if is_palindrome:
                palindromes.append(product)
    largest_palindrome = max(palindromes)
    print('The largest prime number that is the product of two 3-digit numbers is %s' % largest_palindrome)
            
def prob5(maxnum):
    '''
    2520 is the smallest number that can be divided by each 
    of the numbers from 1 to 10 without any remainder.
    
    What is the smallest positive number that is evenly divisible 
    by all of the numbers from 1 to 20?
    '''
    
    prime_factors = []
    temp_factors = []
    
    for number in range(1,maxnum):
        factors = euler.get_prime_factors(number)
        
        for factor in factors:
            if factor in prime_factors:
                
                # the factor needs to be removed from prime_factors so that, if there are multiple factors of
                # the same number (e.g., 3 and 3 are the prime factors of 9), the extra factors will
                # be added to the prime factors.  The factors are stored temporarily in temp_factors.
                prime_factors.remove(factor) 
                temp_factors.append(factor)
            else:
                prime_factors.append(factor)
        prime_factors.extend(temp_factors)
        temp_factors = []
    
    product = 1
    for prime_number in prime_factors:
        product *= prime_number
    
    print('The smallest number that is divisible by each number in the range 1-%s is %s' % (maxnum, product))


def prob6(number):
    '''
    The sum of the squares of the first ten natural numbers is
    1**2 + 2**2 + ... + 10**2 = 385
    
    The square of the sum of the first ten natural numbers is    
    (1 + 2 + ... + 10)**2 = 55**2 = 3025
    
    Hence the difference between the sum of the squares of the first ten 
    natural numbers and the square of the sum is 3025  385 = 2640.
    Find the difference between the sum of the squares of the first 
    one hundred natural numbers and the square of the sum.
    '''
    sum_of_squares = euler.sum_squares(number)
    square_of_sum = euler.square_sum(number)
    difference = square_of_sum - sum_of_squares
    print ('The difference between the square of the sum and sum of the squares of each number in the range 1-%s is %s' % (number, difference))

def prob7(nth_prime_to_find):
    """Calculate the 10001st prime"""
    primes_found = euler.calc_nth_prime(nth_prime_to_find)
    nth_prime = primes_found[-1]
    print('Prime # %s is %s' % (nth_prime_to_find,nth_prime))
        

def prob8():
    '''
    Find the greatest product of five consecutive digits in the 1000-digit number.
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    '''
    number_string = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
    products = euler.analyze_string(number_string)
    max_product = max(products)
    print('the greatest product of five consecutive digits in the 1000-digit number is %s' % max_product)
    

def prob9(number):
    """
    A Pythagorean triplet is a set of three natural numbers, a  b  c, for which,

    a**2 + b**2 = c**2
    For example, 32 + 42 = 9 + 16 = 25 = 5**2.
    
    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    """

    
    max_value = int(number / 2) # add 1 because int() floors the float, add another because range needs 1 more than I would think.
    
    for a in range(1,max_value):
        for b in range(1, max_value):
            for c in range(1, max_value):
                if c <= a or c <= b:
                    pass
                else:
                    if a ** 2 + b ** 2 == c ** 2:
                        if a + b + c == number:
                            print('The product of the Pythagorean triplet which adds to %s is %d' % (number, a*b*c))
                            break
                

def prob10(nmax):
    """
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    Find the sum of all the primes below two million.
    """

    prime_nums = euler.calc_primes_less_than_n(nmax)
    print('The sum of the primes less than %s is %s' % (nmax, sum(prime_nums)))
    

def prob11():
    '''
    In the 20x20 grid below, four numbers along a diagonal line have been marked in red.

    What is the greatest product of four adjacent numbers in any direction 
    (up, down, left, right, or diagonally) in the 20x20 grid?
    '''
    string_of_numbers = '''
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'''
    
    number_grid = string_of_numbers.split('\n')
    number_grid.remove('') # from the first '\n'
    
    
    for row in range(0, len(number_grid)):
        number_grid[row] = number_grid[row].split(' ')
        for number in number_grid[row]:
            number = int(number)
    
    number_grid = [[int(column) for column in row] for row in number_grid]
    
    products = euler.get_products(number_grid)

    print('The largest product of 4 numbers in the 20x20 grid is %s' % max(products))


def prob12(num_divisors_needed):  
    """
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    
    Let us list the factors of the first seven triangle numbers:
    
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    
    What is the value of the first triangle number to have over five hundred divisors?
    """
    
    # Set up for while loop
    number_found = False
    triangular_num_increment = 1 # would be 1 if incremented at top of while loop
    triangular_number = 1
    
    while(not number_found):
       
        prime_factors = euler.get_prime_factors(triangular_number)
        num_divisors, factors = euler.get_num_divisors(triangular_number, prime_factors)
        
        if num_divisors > num_divisors_needed:
            number_found = True
            print('The first triangular number with over %s divisors is %s' % (num_divisors_needed, triangular_number))
        
        else:
            triangular_num_increment += 1
            triangular_number += triangular_num_increment


def prob13():
    """
    Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
    """
    with open('downloads/prob13.txt') as fd:
        number_as_text = fd.read()

    list_of_numbers = number_as_text.split("\n")
    list_of_numbers = [int(num) for num in list_of_numbers]
    sum_of_nums = sum(list_of_numbers)
    sum_of_nums10 = str(sum_of_nums)[0:10]
    print('The first 10 digits of the sum of those bunches of numbers is %s' % sum_of_nums10)


def prob14(maxnum):
    """
    The following iterative sequence is defined for the set of positive integers:

    n -> n/2 (n is even)
    n -> 3n + 1 (n is odd)
    
    Using the rule above and starting with 13, we generate the following sequence:
    
    13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
    It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. 
    Although it has not been proved yet (Collatz Problem), it is thought that 
    all starting numbers finish at 1.

    Which starting number, under one million, produces the longest chain?    
    NOTE: Once the chain starts the terms are allowed to go above one million.
    """
    """
    My idea for solving it is this:  start at one million, do the series, and store
    tuples for how many iterations are left.  
    For the example above, the algorithm would give this:
    (13, 9), (40, 8) (20, 7), (10, 6), ..., (2, 1), (1, 0)
    """
    longest_sequence = []
    minnum = int(maxnum / 2) # any number less than half of the max number will be reached with one more entry by dividing by two.
    
    for number in range(minnum,maxnum):
        if number not in longest_sequence:
            temp_sequence = euler.get_collatz_sequence(number)
            if len(temp_sequence) > len(longest_sequence):
                longest_sequence = list(temp_sequence)
    starting_number = longest_sequence[0]
    
    print('Of numbers < %s, The starting number with the longest chain is %s. It has %s terms.' % (maxnum, starting_number, len(longest_sequence)))
    

def prob15(num_rows, num_columns):
    """
    Starting in the top left corner of a 2x2 grid, there are 6 routes (without backtracking) to the bottom right corner.
    How many routes are there through a 20x20 grid?
    """
    '''
    One way to represent moving along the grid is by writing moves to the right as R and
    moves down as D. Because there can be no backtracking, there must be exactly 20 moves 
    to the right and 20 moves down. These moves can be in any order; so the problem is 
    equivalent to how many unique ways to organize 20 Rs and 20 Ds.  One solution is
    RRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDD; another is
    RRRRRRRRRRRRRRRRRRRDRDDDDDDDDDDDDDDDDDDD; another is
    RRRRRRRRRRRRRRRRRRRDDRDDDDDDDDDDDDDDDDDD and so on.
    
    Conceptually, this is how I understand solving this: give each R and D a unique ID; 
    let them be the numbers 1-40.  There are 40! ways to order their IDs; one possible solution is
    RRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDD
    0123456789abcdefghijklmnopqrstuvwxyzABCD
    
    But there are many ways to order the IDs to achieve this unique combination of Rs and Ds.  Because
    There are 20 Rs (each with a unique ID), there are 20! ways to organize the Rs for this combination
    of Rs and Ds.  Similarly there are 20! ways to organize the Ds.  So, for this combination of Rs and
    Ds, there are 20! * 20! unique combinations of their IDs.
    
    To get the unique combinations of Rs and Ds, we can find the unique combinations of IDs and divide
    by the number of ways to order the IDs of the Rs and the IDs of the Ds.  This gives us
    
                      (R + D)!
    Combinations = -------------
                      R! * D!
                      
    which can be generalized for an m x n grid to 
    Combinations = (m + n)! / (m! * n!)
    '''  
    unique_combinations = factorial(num_rows + num_columns) / (factorial(num_rows) * factorial(num_columns))
    print('There are %s unique ways to get from one corner to its opposite on a %sx%s grid.' %(unique_combinations, num_rows, num_columns))


def prob16(base, exp):
    """Sum of the digits of 2 ** 1000"""

    two_to_thousand = base ** exp
    two_to_thousand = str(two_to_thousand)
    sum_ = 0
    for digit in two_to_thousand:
        digit = int(digit)
        sum_ += digit
    print('The sum of the digits of %s ** %s = %s' % (base, exp, sum_))


def prob17(minnum, maxnum):
    """
    If the numbers 1 to 5 are written out in words: one, two, three, four, five, then 
    there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
    
    If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, 
    how many letters would be used?
    NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) 
    contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use 
    of "and" when writing out numbers is in compliance with British usage.
    """
    word_length_dict = euler.get_word_length_dict()
    total_length = 0
    for n in range(minnum,maxnum + 1):
        total_length += euler.get_num_word_length(n, word_length_dict)
    print('Writing out all numbers from %s to %s takes %s letters' % (minnum, maxnum, total_length))

def prob18():
    """
    By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
       3
      7 4
     2 4 6
    8 5 9 3
    That is, 3 + 7 + 4 + 9 = 23.
    Find the maximum total from top to bottom of the triangle below:
    """
    raw_triangle = '''
                  75
                 95 64
                17 47 82
               18 35 87 10
              20 04 82 47 65
             19 01 23 75 03 34
            88 02 77 73 07 63 67
           99 65 04 28 06 16 70 92
          41 41 26 56 83 40 80 70 33
         41 48 72 33 47 32 37 16 94 29
        53 71 44 65 25 43 91 52 97 51 14
       70 11 33 28 77 73 17 78 39 68 17 57
      91 71 52 38 17 14 91 43 58 50 27 29 48
     63 66 04 68 89 53 67 30 73 16 69 87 40 31
    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
    '''
    triangle = euler.format_triangle(raw_triangle)
    greatest_sum = euler.get_greatest_sum(triangle)
    print('The greatest sum out of any path is %s' % greatest_sum)
    
def prob19(start_year, end_year, day_of_week='Sunday'):
    """
    You are given the following information, but you may prefer to do some research for yourself.

    1 Jan 1900 was a Monday.
    Thirty days has September,
    April, June and November.
    All the rest have thirty-one,
    Saving February alone,
    Which has twenty-eight, rain or shine.
    And on leap years, twenty-nine.

    A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
    How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
    """
    
    days_dict ={'Sunday': 0, 'Monday': 1, 'Tuesday': 2, 'Wednesday': 3, 'Thursday': 4, 'Friday': 5, 'Saturday': 6}
    day_ID = days_dict[day_of_week]
    
    first_day_ID = euler.calibrate_days(start_year) # returns day ID for first day of year
    
    # list_of_days treats every year like a leap year because it doesn't matter how many days are in 
    # the list as long as the correct days are in first_of_month
        
    list_of_days = [day for day in range(day_ID, 366 * (end_year - start_year + 1), 7)]
    
    first_of_month = euler.get_first_of_month_days(first_day_ID, start_year, end_year)
    
    num_first_days = 0
    for day in first_of_month:
        if day in list_of_days:
            num_first_days += 1
    
    print('%s months from %s to %s began with a %s' % (num_first_days, start_year, end_year, day_of_week))

def prob20(number):
    """Find the sum of digits in 100!"""
    fact = euler.factorial(number)
    sum_of_digits = sum([int(digit) for digit in str(fact)])
    print('The sum of the digits of %s! is %s' % (number, sum_of_digits))


def prob21(max_num):
    """
    Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide 
    evenly into n). If d(a) = b and d(b) = a, where a  b, then a and b are an amicable pair 
    and each of a and b are called amicable numbers.
    
    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110;
    therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
    
    Evaluate the sum of all the amicable numbers under 10000.
    """
    
    # numbers_factors is a list of tuples of the form (number, prime_factors)
    numbers_factors = euler.get_numbers_and_summed_factors(max_num)
    
    # Each pair is listed twice in the amicable_pairs list
    amicable_pairs = euler.get_amicable_pairs(max_num, numbers_factors)

    unique_numbers = []
    
    for pair in amicable_pairs:
        unique_numbers.append(pair[0])
    
    sum_of_amicable_pairs = sum(unique_numbers)
    print("The sum of amicable pairs <= %s is %s" % (max_num, sum_of_amicable_pairs))
    
def prob22():
    """
    Using names.txt (right click and 'Save Link/Target As...'), a 46K text file 
    containing over five-thousand first names, begin by sorting it into 
    alphabetical order. Then working out the alphabetical value for each name, 
    multiply this value by its alphabetical position in the list to obtain a name score.

    For example, when the list is sorted into alphabetical order, COLIN, which is worth 
    3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a 
    score of 938 * 53 = 49714.
    
    What is the total of all the name scores in the file?
    """
    import csv
    
    alpha_dict = euler.get_alphabet_dict()
    with open("downloads/names.txt", newline='') as csvfile:
        namesfile = csv.reader(csvfile, delimiter = ',', quotechar='"')
    
        for row in namesfile:
            names = row
    names.sort()
    
    total_value = 0
    for index, name in enumerate(names):
        name_value = 0
        multiplier = index + 1
        for letter in name:
            name_value += alpha_dict[letter]
        
        name_value *= multiplier
        total_value += name_value
    
    print('The sum of all the name values in the list of names is %s' % total_value)

def prob23(max_num=20162):
    """
    A perfect number is a number for which the sum of its proper divisors is exactly 
    equal to the number. For example, the sum of the proper divisors of 28 would be 
    1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

    A number n is called deficient if the sum of its proper divisors is less than n 
    and it is called abundant if this sum exceeds n.
    
    As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number 
    that can be written as the sum of two abundant numbers is 24. By mathematical 
    analysis, it can be shown that all integers greater than 28123 can be written as 
    the sum of two abundant numbers. However, this upper limit cannot be reduced any 
    further by analysis even though it is known that the greatest number that cannot 
    be expressed as the sum of two abundant numbers is less than this limit.
    
    Find the sum of all the positive integers which cannot be written 
    as the sum of two abundant numbers.
    """
    
    primes_file = shelve.open('numbers_and_factors')
    numbers_factors = primes_file['numbers_factors'][0:max_num - 1] # Subtract 1 because the list's 0th element is (2,1)
    primes_file.close()
    
    abundant_numbers = euler.get_abundant_numbers(numbers_factors)
    
    unique_sums = euler.get_unique_sums(max_num, abundant_numbers)
    not_a_sum = [number for number in range(1, max_num+1) if number not in unique_sums]
    prob23_answer = sum(not_a_sum)
    print('The sum of all numbers that can\'t be expressed as the sum of two abundant numbers is %s\n' % prob23_answer)
    
    
def prob24(string_to_sort, nth_permutation):
    """
    A permutation is an ordered arrangement of objects. For example, 3124 is one possible 
    permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed 
    numerically or alphabetically, we call it lexicographic order. The lexicographic 
    permutations of 0, 1 and 2 are:

    012   021   102   120   201   210
    
    What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
    """
    
    ordered_list = euler.sort_string_nth_permutation(string_to_sort, nth_permutation)
    ordered_string = ''
    for char in ordered_list:
        ordered_string += char
    print("Permutation # %d of %s is %s" % (nth_permutation, string_to_sort, ordered_string))
    
def prob25(max_num):
    """
    The Fibonacci sequence is defined by the recurrence relation:

    Fn = Fn1 + Fn2, where F1 = 1 and F2 = 1.
    Hence the first 12 terms will be:
    
    F1 = 1
    F2 = 1
    F3 = 2
    F4 = 3
    F5 = 5
    F6 = 8
    F7 = 13
    F8 = 21
    F9 = 34
    F10 = 55
    F11 = 89
    F12 = 144

    The 12th term, F12, is the first term to contain three digits.    
    What is the first term in the Fibonacci sequence to contain 1000 digits?
    """
    counter = euler.fibonacci_until(max_num)
    print('Term %s is the first term in the Fibonacci sequence greater than %s' %(counter, max_num))

def prob26(max_num):
    """
    A unit fraction contains 1 in the numerator. The decimal representation 
    of the unit fractions with denominators 2 to 10 are given:

    1/2    =     0.5
    1/3    =     0.(3)
    1/4    =     0.25
    1/5    =     0.2
    1/6    =     0.1(6)
    1/7    =     0.(142857)
    1/8    =     0.125
    1/9    =     0.(1)
    1/10    =     0.1
    Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It 
    can be seen that 1/7 has a 6-digit recurring cycle.
    
    Find the value of d 1000 for which 1/d contains the longest recurring 
    cycle in its decimal fraction part.
    """
    
    max_repetitions = 0
    answer = 0 
    for number in range(1, max_num + 1):
        repeating_digits_num = euler.get_repeating_digits(number)
        if repeating_digits_num > max_repetitions:
            max_repetitions = repeating_digits_num
            answer = number
    
    print('The best number is %s, it repeats %s digits' % (answer, max_repetitions))
    
def prob27(min_num=-1000, max_num=1000):
    """
    Euler published the remarkable quadratic formula:

    n**2 + n + 41
    
    It turns out that the formula will produce 40 primes for the 
    consecutive values n = 0 to 39. However, when 
    n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and 
    certainly when n = 41, 41� + 41 + 41 is clearly divisible by 41.
    
    Using computers, the incredible formula  n�  79n + 1601 was 
    discovered, which produces 80 primes for the consecutive 
    values n = 0 to 79. The product of the coefficients, 79 and 1601, is 126479.
    
    Considering quadratics of the form:
    n**2 + an + b, where |a|  1000 and |b|  1000
    where |n| is the modulus/absolute value of n
    e.g. |11| = 11 and |4| = 4
    
    Find the product of the coefficients, a and b, for the quadratic 
    expression that produces the maximum number of primes for 
    consecutive values of n, starting with n = 0.
    """
    
    primes_file = shelve.open(SHELVED_FILE)
    primes = primes_file["list_of_primes"][0:1000]
    primes_file.close()
    a = b = min_num + 1
    best_a = 0
    best_b = 0
    max_consecutive_primes = 0
    
#    while a < max_num:
#        while b < max_num:
    for a in range(min_num + 1, max_num):
        for b in range(min_num + 1, max_num):
            if (b <= 1) or (a % 2 == 0):
                still_looking = False
            else:
                still_looking = True
            n = 0
            consecutive_primes = 0
            
            while still_looking:
            
                test_prime = n ** 2 + a * n + b
            
                if test_prime in primes:
                    consecutive_primes += 1
                    n += 1
                
                else:
                    still_looking = False
                    
                    
            if consecutive_primes > max_consecutive_primes: 
                max_consecutive_primes = consecutive_primes
                best_a = a
                best_b = b
            
#            b+=1
        
#        a+=1
    
    answer = best_a * best_b
    
    print('The a and b that produce the most primes are %d and %d.  Their product is %d' %(best_a, best_b, answer))
    
        
def prob28(dimension):
    """
    Starting with the number 1 and moving to the right in a 
    clockwise direction a 5 by 5 spiral is formed as follows:

    21 22 23 24 25
    20  7  8  9 10
    19  6  1  2 11
    18  5  4  3 12
    17 16 15 14 13
    
    It can be verified that the sum of the numbers on the diagonals is 101.
    
    What is the sum of the numbers on the diagonals in a 
    1001 by 1001 spiral formed in the same way?
    """
    sum_ = 0
    
    original_dimension = dimension
    
    while dimension > 1:
        dimension_squared = dimension * dimension
        increment = dimension - 1
        
        top_right = dimension_squared
        top_left = top_right - increment
        bottom_left = top_left - increment
        bottom_right = bottom_left - increment
        sum_ += top_right + top_left + bottom_left + bottom_right
        
        dimension -= 2
    
    sum_ += 1
    
    print("The sum of a %dx%d square is %d" % (original_dimension, original_dimension, sum_))
    
def prob29(amax, bmax):
    """
    Consider all integer combinations of ab for 2 < a < 5 and 2 < b < 5:

    2**2=4,  2**3=8,   2**4=16,  2**5=32
    3**2=9,  3**3=27,  3**4=81,  3**5=243
    4**2=16, 4**3=64,  4**4=256, 4**5=1024
    5**2=25, 5**3=125, 5**4=625, 5**5=3125
    
    If they are then placed in numerical order, with any repeats removed, 
    we get the following sequence of 15 distinct terms:
    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
    How many distinct terms are in the sequence generated by a**b for 2 < a < 100 and 2 < b < 100?
    """
    
    distinct_terms = set()
    
    for a in range(2, amax + 1):
        for b in range(2, bmax + 1):
            distinct_terms.add(a ** b)
    
    num_terms = len(distinct_terms)
    
    print("There are %d distinct terms for all combinations of a**b from 2 to %d" %(num_terms, amax))
    
    
def prob30(power):
    """
    Find all numbers that can be written as the sum of 
    each digit to the 5th.
    """
    max_sum = euler.get_max_sum(power)
    best_numbers = [] # contains a list of all numbers that fit the criteria above
    
    for number in range(2, max_sum):
        sum_of_digits_to_power = euler.get_sum_of_digits_to_power(number, power)
    
        if number == sum_of_digits_to_power:
            best_numbers.append(number)
    
    answer = sum(best_numbers)
    print('The sum of all numbers that can be written as each digit to the power of %d is %d ' % (power, answer))

def prob31(coins, to_make):
    '''
    Problem 31, implementing backtracking.
    
    Args:
        coins the list of coin denominations
        to_make, the amount desired
    '''

    coins.sort()
    total_combinations = euler.get_coin_total(coins, to_make, 0, len(coins) - 1)
    print(total_combinations)


def prob32(low=1, high=9):
    """
    We shall say that an n-digit number is pandigital if it makes use 
    of all the digits 1 to n exactly once; for example, the 5-digit 
    number, 15234, is 1 through 5 pandigital.

    The product 7254 is unusual, as the identity, 39 * 186 = 7254, 
    containing multiplicand, multiplier, and product is 1 through 9 pandigital.

    Find the sum of all products whose multiplicand/multiplier/product 
    identity can be written as a 1 through 9 pandigital.
    
    HINT: Some products can be obtained in more than one way so be 
    sure to only include it once in your sum.
    """
    
    pandigital_numbers = ''
    for number in range(low, high + 1):
        pandigital_numbers += str(number)
    yield_permutations = euler.yield_permutations_maker(low, high)
    products = set()
    for permutation in itertools.permutations(pandigital_numbers, high - low + 1):
        p = ''.join(permutation)
        for num1, num2, num3 in yield_permutations(p):
            if num1 * num2 == num3: products.add(num3)
    
    print(sum(products))
    
def prob33():
    '''
    The fraction 49/98 is a curious fraction, as an inexperienced 
    mathematician in attempting to simplify it may incorrectly 
    believe that 49/98 = 4/8, which is correct, is obtained by 
    cancelling the 9s.

    We shall consider fractions like, 30/50 = 3/5, to be trivial examples.

    There are exactly four non-trivial examples of this type of fraction, 
    less than one in value, and containing two digits in the numerator 
    and denominator.

    If the product of these four fractions is given in its lowest 
    common terms, find the value of the denominator.
    '''
    
    curious_fractions = []
    for denominator in range(11,100):
        for numerator in range(10,denominator):
            
            new_fraction = euler.check_digits(denominator, numerator)
            
            if new_fraction is not None:
                new_num = new_fraction[0]
                new_denom = new_fraction[1]
                
                try:
                    if new_num / new_denom == numerator / denominator:
                        curious_fractions.append((numerator, denominator))
                    
                except ZeroDivisionError:
                    print(numerator, denominator)
    print('curious fractions: {0}'.format(curious_fractions))
    
    num_product = 1
    den_product = 1
    for curious_fraction in curious_fractions:
        num_product *= curious_fraction[0]
        den_product *= curious_fraction[1]
        
    print('new numerator: {0}   new denominator: {1}'.format(num_product, den_product))
    

def prob34(max_num = 1854721):
    '''145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.

    Find the sum of all numbers which are equal to the sum of the 
    factorial of their digits.

    Note: as 1! = 1 and 2! = 2 are not sums they are not included.
    '''
    factorions = []
    for num in range(10, max_num):
        sum_factorials = sum(factorial(int(i)) for i in str(num))
        if num == sum_factorials:
            factorions.append(num)
    print('The factorions are {0}\nTheir sum is {1}'.format(
           factorions, sum(factorions)))

def prob35(maxnum=1000000):
    '''
    The number, 197, is called a circular prime because all 
    rotations of the digits: 197, 971, and 719, are themselves prime.

    There are thirteen such primes below 
    100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
    
    How many circular primes are there below one million?
    '''
    
    primes_file = shelve.open('primes_less_than1000000')
    primes = primes_file["primes_less_than1000000"]
    primes_file.close()
    
    circular_primes = set()
    
    for number in range(maxnum):
        
        if number in primes:
            rotations = euler.circularize(number)
            
            if all((i in primes) for i in rotations):
    
                for rotation in rotations:
                    circular_primes.add(rotation)
            
    print(circular_primes)
    print('the answer is {0}'.format(len(circular_primes)))
    
def prob36(maxnum):
    '''
    The decimal number, 585 = 1001001001 (binary), is palindromic 
    in both bases.

    Find the sum of all numbers, less than one million, which are 
    palindromic in base 10 and base 2.
    
    (Please note that the palindromic number, in either base, 
    may not include leading zeros.)
    '''
    nums_found = []
    for number in range(1, maxnum):
        
        # get rid of all numbers end with an even number
        if number % 2 != 0 and euler.ispalindrome(str(number)):
            binary = euler.base10to2(number)
            if euler.ispalindrome(binary):
                nums_found.append(number)
    print('All palindromes < {0}:\n{1}'.format(maxnum, nums_found))
    print('Their sum: {0}'.format(sum(nums_found)))
    
def prob37():
    '''
    The number 3797 has an interesting property. Being prime itself, 
    it is possible to continuously remove digits from left to right, 
    and remain prime at each stage: 3797, 797, 97, and 7. 
    Similarly we can work from right to left: 3797, 379, 37, and 3.

    Find the sum of the only eleven primes that are both truncatable 
    from left to right and right to left.

    NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
    '''
    
    # pull the primes from the file.
    primes_file = shelve.open("primes_less_than1000000")
    primes = primes_file["primes_less_than1000000"]
    primes_file.close()
    
    # don't look for numbers that are too small.
    number = 11
    numfound = 0
    
    truncatable_primes = []
    
    while numfound < 11 and number < 1000000:
        
        # don't check non-prime numbers
        if number in primes:
            truncations = euler.truncate(number)
            
            if all(num in primes for num in truncations):
                truncatable_primes.append(number)
                numfound += 1
                
        number += 1
    
    total = sum(truncatable_primes)
    
    print('The truncatable primes are {0}.'.format(truncatable_primes))
    print('Their total is {0}'.format(total))
    
    
def prob38():
    '''
    Take the number 192 and multiply it by each of 1, 2, and 3:
    192 * 1 = 192
    192 * 2 = 384
    192 * 3 = 576
    By concatenating each product we get the 1 to 9 pandigital, 
    192384576. We will call 192384576 the concatenated product 
    of 192 and (1,2,3)
    
    The same can be achieved by starting with 9 and multiplying 
    by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is 
    the concatenated product of 9 and (1,2,3,4,5).
    
    What is the largest 1 to 9 pandigital 9-digit number that can be 
    formed as the concatenated product of an integer with 
    (1,2, ... , n) where n = 1?
    '''
    
    largest = ''
    is_pandigital = euler.is_pandigital_generator(1, 9)

    for n in range(1, 100000):
        num_digits = euler.get_num_digits(n)
        numbers = [n]
        multiplier = 2
        
        while num_digits < 9:
            new_num = n * multiplier
            numbers.append(new_num)
            num_digits += euler.get_num_digits(new_num)
            
        if num_digits == 9 and is_pandigital(numbers):
            num_as_string = ''.join(str(num) for num in numbers)
            
            if num_as_string > largest:
                largest = num_as_string
    
    print(largest)
    
def prob39(max_perimeter=1000):
    '''
    If p is the perimeter of a right angle triangle with integral 
    length sides, {a,b,c}, there are exactly three solutions for p = 120.

    {20,48,52}, {24,45,51}, {30,40,50}

    For which value of p < 1000, is the number of solutions maximised?
    '''
    
    max_found = 0
    p_max = 1
    for perimeter in range(12, max_perimeter):
        num_found = len(list(euler.right_triangle_combinations(perimeter)))
        if num_found > max_found:
            max_found = num_found
            p_max = perimeter
    
    print('Found {0} solutions with perimeter of {1}'.format(max_found, p_max))


def prob40():
    '''
    An irrational decimal fraction is created by concatenating 
    the positive integers:

    0.123456789101112131415161718192021...

    It can be seen that the 12th digit of the fractional part is 1.
    
    If dn represents the nth digit of the fractional part, find the 
    value of the following expression.
    
    d1  d10  d100  d1000  d10000  d100000  d1000000
    '''
    product = lambda a, b: a * b
    a = '.' + ''.join(str(i) for i in range(1, 500000))
    digits = (int(a[10 ** i]) for i in range(7))
    print(functools.reduce(product, digits))

def prob41():
    """
    We shall say that an n-digit number is pandigital if it makes use of all 
    the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital 
    and is also prime.
    
    What is the largest n-digit pandigital prime that exists?
    """
    gen = euler.is_pandigital_generator
    is_pandigital = {i: gen(1, i) for i in range(4, 10)}
    
    largest = 0
    
    # don't need to go any higher than 7654321 because every
    # 1-8 or 1-9 pandigital number is divisible by 3. 
    for num in range(1234, 7654322):
        num_digits = euler.get_num_digits(num)
        if is_pandigital[num_digits]([num]):
            if euler.is_prime(num):
                largest = num
    print(largest)

def prob42():
    """
    The nth term of the sequence of triangle numbers is given by tn = ½n(n+1); 
    so the first ten triangle numbers are: 
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    By converting each letter in a word to a number corresponding to its 
    alphabetical position and adding these values we form a word value. 
    For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. 
    If the word value is a triangle number then we shall call the word a 
    triangle word.

    Using words.txt, a 16K text file containing nearly two-thousand common 
    English words, how many are triangle words?
    """
    # map capital letters to their value: 'A' == 1, 'B' == 2, etc.
    letters_to_numbers = {chr(i): i - 64 for i in range(65, 91)}
    triangular_numbers = set(euler.generate_triangular_numbers(1, 100))
    with open('downloads/words.txt') as fd:
        reader = csv.reader(fd)
        words = [line for line in reader][0]

    num_words = 0
    def sum_word(word):
        return sum(letters_to_numbers[character] for character in word)
    
    for word in words:
        
        if sum_word(word) in triangular_numbers:
            num_words += 1
    
    print(num_words)
    
def prob43():
    """
    The number, 1406357289, is a 0 to 9 pandigital number because it is made 
    up of each of the digits 0 to 9 in some order, but it also has a rather 
    interesting sub-string divisibility property.

    Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, 
    we note the following:

    d2d3d4=406 is divisible by 2
    d3d4d5=063 is divisible by 3
    d4d5d6=635 is divisible by 5
    d5d6d7=357 is divisible by 7
    d6d7d8=572 is divisible by 11
    d7d8d9=728 is divisible by 13
    d8d9d10=289 is divisible by 17
    Find the sum of all 0 to 9 pandigital numbers with this property.
    
    """
    
    primes = [2, 3, 5, 7, 11, 13, 17]
    numbers = []
    for p in itertools.permutations('1234567890'):
        p = ''.join(p)
        if (p[0] != '0' and
            int(p[1:4]) % primes[0] ==0 and
            int(p[2:5]) % primes[1] ==0 and
            int(p[3:6]) % primes[2] ==0 and
            int(p[4:7]) % primes[3] ==0 and
            int(p[5:8]) % primes[4] ==0 and
            int(p[6:9]) % primes[5] ==0 and
            int(p[7: ]) % primes[6] ==0):
            numbers.append(int(p))
    print(sum(numbers))
    
def prob44():
    """Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
    
    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    
    It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
    However, their difference, 70 − 22 = 48, is not pentagonal.
    
    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference 
    are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
    """
    least = 10 ** 10
    
    # Assume the answer is in the first 10000 pentagonal numbers
    pent_nums = set(euler.generate_pentagonal_numbers(1, 10000))
    pent_nums_in_order = list(pent_nums)
    for index, number1 in enumerate(pent_nums_in_order):
        for number2 in pent_nums_in_order[index:]:
            s = number1 + number2
            d = number2 - number1
            if (s in pent_nums and
                d in pent_nums):
                if d < least:
                    least = d
                
    print(least)

def prob45(n):
    """
    Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

    Triangle         Tn=n(n+1)/2         1, 3, 6, 10, 15, ...
    Pentagonal         Pn=n(3n−1)/2         1, 5, 12, 22, 35, ...
    Hexagonal         Hn=n(2n−1)         1, 6, 15, 28, 45, ...
    It can be verified that T285 = P165 = H143 = 40755.
    
    Find the next triangle number that is also pentagonal and hexagonal.
    """
    
    num_found = 0
    common_number=0
    
    triangle_nums = set(euler.generate_triangular_numbers(1, 100000))
    pentagonal_nums = set(euler.generate_pentagonal_numbers(1, 100000))
    hexagonal_nums = list(euler.generate_hexagonal_numbers(1, 100000))
    
    for num in hexagonal_nums:
        if num in triangle_nums and num in pentagonal_nums:
            num_found += 1
            if num_found == n:
                common_number = num
                break
    
    print('The {}th common number is {}'.format(n, common_number))
        

def prob46():
    """
    It was proposed by Christian Goldbach that every odd composite number can be 
    written as the sum of a prime and twice a square.

    9 = 7 + 2×1**2
    15 = 7 + 2×2**2
    21 = 3 + 2×3**2
    25 = 7 + 2×3**2
    27 = 19 + 2×2**2
    33 = 31 + 2×1**2
    
    It turns out that the conjecture was false.
    What is the smallest odd composite that cannot be written as the sum of a 
    prime and twice a square?
    
    """
    
    def goldbachs_test(number, primes):
        for prime in primes:
            if prime > number: 
                return False
            
            potential_square = (number - prime) / 2
            if euler.is_square(potential_square):
                return True
            
    
    some_primes = euler.primesfrom2to(1000000)
    for odd_number in itertools.count(9, 2):
        passes_test = goldbachs_test(odd_number, some_primes)
        if not passes_test:
            break
    print(odd_number)

def prob47(n):
    """
    The first two consecutive numbers to have two distinct prime factors are:

    14 = 2 × 7
    15 = 3 × 5
    
    The first three consecutive numbers to have three distinct prime factors are:
    
    644 = 2² × 7 × 23
    645 = 3 × 5 × 43
    646 = 2 × 17 × 19.
    
    Find the first four consecutive integers to have four distinct prime factors. 
    What is the first of these numbers?
    
    ##
    Find the first n numbers to have n distinct prime factors
    """
    
    primes = euler.primesfrom2to(1000000)
    primeset = set(primes)
    
    num_consecutive = 0
    
    def solve():
        nonlocal num_consecutive
        for number in itertools.count(1, 1):
            if num_consecutive == n:
                return number - n
            
            if number in primeset:
                num_consecutive = 0
                continue
            
            current_factors = set(euler.get_prime_factors3(number, primes))
            if len(current_factors) != n:
                num_consecutive = 0
                continue
            
            num_consecutive += 1
    
    answer = solve()
    print("The answer to prob47 is {}".format(answer))
    
def prob48(n, x):
    """
    The series, 1**1 + 2**2 + 3**3 + ... + 10**10 = 10405071317.
    Find the last ten digits of the series, 11 + 22 + 33 + ... + 10001000
    
    Return the last 'x' digits of 1**1 + 2**2 + 3**3 + ... + n**n
    
    """
    
    print(str(sum(i**i for i in range(1, n+1)))[-x:])
    
def prob49():
    """
    The arithmetic sequence, 1487, 4817, 8147, in which each of the terms 
    increases by 3330, is unusual in two ways: (i) each of the three terms 
    are prime, and, (ii) each of the 4-digit numbers are permutations of one another.
    
    There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, 
    exhibiting this property, but there is one other 4-digit increasing sequence.
    
    What 12-digit number do you form by concatenating the three terms in this sequence?
    
    """
    def generate_test_numbers():
        
        return [i for i in range(1,5000)]
    
    primes = euler.primesfrom2to(10000)
    primes = list(filter(lambda x: x >1000, primes))
    primeset = set(primes)
    test_numbers = generate_test_numbers()
    for prime in primes:
        for number in test_numbers:
            if prime + number in primeset and prime + number + number in primeset:
                if euler.numbers_are_permutations([prime, prime+number, prime+number+number]):
                    print('{}: {}{}{}'.format(number, prime, prime+number, prime+number+number))
                    
    print('OOps, bad guess')
    
def prob50(n):
    """
    The prime 41, can be written as the sum of six consecutive primes:

    41 = 2 + 3 + 5 + 7 + 11 + 13
    This is the longest sum of consecutive primes that adds to a prime below one-hundred.
    
    The longest sum of consecutive primes below one-thousand that adds to a 
    prime, contains 21 terms, and is equal to 953.
    
    Which prime, below one-million, can be written as the sum of the most consecutive primes?
    
    """
    
    primes = euler.primesfrom2to(n)
    primeset = set(primes)
    most_consecutive = 2
    for index1, prime in enumerate(primes):
        candidate = prime
        index2 = index1 + most_consecutive
        while candidate < n:
            try:
                primes[index2]
            except IndexError:
                break
            
            candidate = sum(primes[index1:index2])
            if candidate in primeset:
                most_consecutive = index2 - index1
                print(candidate)
                answer = candidate
                
            index2 += 1
    
    print('The answer is definitely {}'.format(answer))
            

def prob51():
    """
    By replacing the 1st digit of the 2-digit number *3, it turns out that six 
    of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.
    
    By replacing the 3rd and 4th digits of 56**3 with the same digit, this 
    5-digit number is the first example having seven primes among the ten 
    generated numbers, yielding the 
    family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, 
    being the first member of this family, is the smallest prime with this property.
    
    Find the smallest prime which, by replacing part of the number (not 
    necessarily adjacent digits) with the same digit, is part of an eight 
    prime value family.
        
    """
    
def prob52():
    """
    It can be seen that the number, 125874, and its double, 251748, contain 
    exactly the same digits, but in a different order.
    
    Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, 
    contain the same digits.
    
    """
    
    
def prob53():
    """
    There are exactly ten ways of selecting three from five, 12345:
    123, 124, 125, 134, 135, 145, 234, 235, 245, and 345
    
    In combinatorics, we use the notation, 5C3 = 10.

    In general,
    
               n!    
    nCr =  ---------     
            r!(n−r)!     
    
    ,where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.
    It is not until n = 23, that a value exceeds one-million: 23C10 = 1144066.
    
    How many, not necessarily distinct, values of  nCr, for 1 ≤ n ≤ 100, are greater than one-million?
    
    """

def prob54():
    """
    In the card game poker, a hand consists of five cards and are ranked, 
    from lowest to highest, in the following way:
    
    High Card: Highest value card.
    One Pair: Two cards of the same value.
    Two Pairs: Two different pairs.
    Three of a Kind: Three cards of the same value.
    Straight: All cards are consecutive values.
    Flush: All cards of the same suit.
    Full House: Three of a kind and a pair.
    Four of a Kind: Four cards of the same value.
    Straight Flush: All cards are consecutive values of same suit.
    Royal Flush: Ten, Jack, Queen, King, Ace, in same suit.

    The cards are valued in the order:
    2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.
    
    If two players have the same ranked hands then the rank made up of the 
    highest value wins; for example, a pair of eights beats a pair of fives 
    (see example 1 below). But if two ranks tie, for example, both players 
    have a pair of queens, then highest cards in each hand are compared 
    (see example 4 below); if the highest cards tie then the next highest 
    cards are compared, and so on.
    
    Consider the following five hands dealt to two players:
    
    Hand         Player 1         Player 2                Winner
    1         5H 5C 6S 7S KD      2C 3S 8S 8D TD         Player 2
               Pair of Fives      Pair of Eights 
  
  2         5D 8C 9S JS AC          2C 5C 7D 8S QH       Player 1
           Highest card Ace       Highest card Queen  
      
    3         2D 9C AS AH AC        3D 6D 7D TD QD       Player 2
                Three Aces        Flush with Diamonds
      
    4         4D 6S 9H QH QC       3D 6D 7H QD QS        Player 1
              Pair of Queens       Pair of Queens  
            Highest card Nine    Highest card Seven
       
    5         2H 2D 4C 4D 4S        3C 3D 3S 9S 9D       Player 1
                Full House            Full House    
             With Three Fours      with Three Threes
           
    The file, poker.txt, contains one-thousand random hands dealt to two 
    players. Each line of the file contains ten cards (separated by a 
    single space): the first five are Player 1's cards and the last five are 
    Player 2's cards. You can assume that all hands are valid (no invalid 
    characters or repeated cards), each player's hand is in no specific order, 
    and in each hand there is a clear winner.
    
    How many hands does Player 1 win?

    """


def prob55():
    """
    If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.

    Not all numbers produce palindromes so quickly. For example,
    
    349 + 943 = 1292,
    1292 + 2921 = 4213
    4213 + 3124 = 7337
    
    That is, 349 took three iterations to arrive at a palindrome.
    
    Although no one has proved it yet, it is thought that some numbers, like 
    196, never produce a palindrome. A number that never forms a palindrome 
    through the reverse and add process is called a Lychrel number. Due to the 
    theoretical nature of these numbers, and for the purpose of this problem, 
    we shall assume that a number is Lychrel until proven otherwise. In 
    addition you are given that for every number below ten-thousand, it will 
    either (i) become a palindrome in less than fifty iterations, or, (ii) no 
    one, with all the computing power that exists, has managed so far to map it 
    to a palindrome. In fact, 10677 is the first number to be shown to require 
    over fifty iterations before producing a 
    palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).
    
    Surprisingly, there are palindromic numbers that are themselves Lychrel 
    numbers; the first example is 4994.
    
    How many Lychrel numbers are there below ten-thousand?
    
    NOTE: Wording was modified slightly on 24 April 2007 to emphasise the 
    theoretical nature of Lychrel numbers.
    
    """
    
def prob56():
    """
    A googol (10**100) is a massive number: one followed by one-hundred zeros; 
    100**100 is almost unimaginably large: one followed by two-hundred zeros. 
    Despite their size, the sum of the digits in each number is only 1.
    
    Considering natural numbers of the form, ab, where a, b < 100, what is the 
    maximum digital sum?
    
    """

def prob57():
    """
    It is possible to show that the square root of two can be expressed as an 
    infinite continued fraction.
    
    √2 = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...
    
    By expanding this for the first four iterations, we get:
    1 + 1/2 = 3/2 = 1.5
    1 + 1/(2 + 1/2) = 7/5 = 1.4
    1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...
    1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...
    
    The next three expansions are 99/70, 239/169, and 577/408, but the eighth 
    expansion, 1393/985, is the first example where the number of digits in the 
    numerator exceeds the number of digits in the denominator.
    
    In the first one-thousand expansions, how many fractions contain a 
    numerator with more digits than denominator?
    
    """

def prob58():
    """
    Starting with 1 and spiralling anticlockwise in the following way, a square 
    spiral with side length 7 is formed.
    
    37 36 35 34 33 32 31
    38 17 16 15 14 13 30
    39 18  5  4  3 12 29
    40 19  6  1  2 11 28
    41 20  7  8  9 10 27
    42 21 22 23 24 25 26
    43 44 45 46 47 48 49
        
    It is interesting to note that the odd squares lie along the bottom right 
    diagonal, but what is more interesting is that 8 out of the 13 numbers 
    lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62%.
        
    If one complete new layer is wrapped around the spiral above, a square 
    spiral with side length 9 will be formed. If this process is continued, 
    what is the side length of the square spiral for which the ratio of primes 
    along both diagonals first falls below 10%?
    
    """

def prob59():
    """
    Each character on a computer is assigned a unique code and the preferred 
    standard is ASCII (American Standard Code for Information Interchange). 
    For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.
    
    A modern encryption method is to take a text file, convert the bytes to 
    ASCII, then XOR each byte with a given value, taken from a secret key. 
    The advantage with the XOR function is that using the same encryption key 
    on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, 
    then 107 XOR 42 = 65.
    
    For unbreakable encryption, the key is the same length as the plain text 
    message, and the key is made up of random bytes. The user would keep the 
    encrypted message and the encryption key in different locations, and 
    without both "halves", it is impossible to decrypt the message.
    
    Unfortunately, this method is impractical for most users, so the modified 
    method is to use a password as a key. If the password is shorter than the 
    message, which is likely, the key is repeated cyclically throughout the 
    message. The balance for this method is using a sufficiently long password 
    key for security, but short enough to be memorable.
    
    Your task has been made easy, as the encryption key consists of three lower 
    case characters. Using cipher1.txt (right click and 'Save Link/Target As...'), 
    a file containing the encrypted ASCII codes, and the knowledge that the plain 
    text must contain common English words, decrypt the message and find the sum 
    of the ASCII values in the original text.
    
    """

def prob60():
    """
    The primes 3, 7, 109, and 673, are quite remarkable. By taking any two 
    primes and concatenating them in any order the result will always be 
    prime. For example, taking 7 and 109, both 7109 and 1097 are prime. The 
    sum of these four primes, 792, represents the lowest sum for a set of 
    four primes with this property.
    
    Find the lowest sum for a set of five primes for which any two primes 
    concatenate to produce another prime.
    
    """

if __name__ == "__main__":
#    prob3(0) 
#    prob4()
#    prob5(20)
#    prob6(100) 
#    prob7(1001)
#    prob8()
#    prob9(1000)
#    prob10(20000)
#    prob11()
#    prob12(500)
#    prob13()
#    prob14(1000)
#    prob15(20, 20)
#    prob16(2, 100)
#    prob17(1, 1000)
#    prob18()
#    prob19(1901, 2000, 'Monday')
#    prob20(100)
#    prob21(10000)
#    prob22()
#    prob23(20162)
#    prob24('0123456789', 1000000)
#    prob25(10**999)
#    prob26(2000)
#    prob27(-1000, 1000) # takes about 12 s to run
#    prob28(1001)
#    prob29(100, 100)
#    prob30()
#    prob31()
#    prob32()
#    prob33()
#    prob34()
#    prob35(1000000)
#    prob36(1000000)
#    prob37()
#    prob38()
#    prob39()
#    prob40()    
#    prob41()
#    prob42()
#    prob43()
#    prob44()
#    prob45(3)
#    prob46()
#    prob47(4)
#    prob48(1000,10)
#    prob49()
#    prob50(1000000)
    pass